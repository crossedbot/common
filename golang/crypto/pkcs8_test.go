package crypto

import (
	"encoding/pem"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestDecryptPKCS8Key(t *testing.T) {
	// Generated by:
	// $ openssl genpkey			\
	//	-aes256				\
	//	-out rsa4096.encrypted.pem	\
	//	-algorithm RSA			\
	//	-pkeyopt rsa_keygen_bits:4096
	key := []byte(`-----BEGIN ENCRYPTED PRIVATE KEY-----
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
-----END ENCRYPTED PRIVATE KEY-----
`)
	decryptedKey := []byte(`-----BEGIN PRIVATE KEY-----
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
-----END PRIVATE KEY-----
`)

	block, _ := pem.Decode(key)
	require.NotNil(t, block)
	decryptedBlock, _ := pem.Decode(decryptedKey)
	require.NotNil(t, decryptedBlock)
	expected := decryptedBlock.Bytes
	passphrase := []byte("hello")
	notPassphrase := []byte("goodbye")

	// Check that the passphrase works
	actual, err := DecryptPKCS8Key(block.Bytes, passphrase)
	require.Nil(t, err)
	require.Equal(t, expected, actual)

	// Check that the wrong passphrase produces the wrong key
	actual, err = DecryptPKCS8Key(block.Bytes, notPassphrase)
	require.NotNil(t, err)
	require.NotEqual(t, expected, actual)
}
